// Type definitions for hbase 0.6.1
// Project: https://github.com/adaltas/node-hbase#readme
// Definitions by: Mihir Kurdekar <https://github.com/mihirkurdekar>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// Reference doc https://hbase.js.org/api/client/

/** Declaration file generated by dts-gen and edited further by reading documentation*/

import {ClientRequestArgs} from "http";

export = hbase;

/**
 * https://hbase.js.org/api/client/#grab-an-instance-of-hbaseclient
 * @param config
 */
declare function hbase(config: hbase.ClientOptions): hbase.Client;

/**
 * https://hbase.js.org/
 */
declare namespace hbase {
    type CallbackType = (err, data, response?) => void;

    /***
     * https://hbase.js.org/api/client/#creating-a-new-client
     */
    interface kerberoseOptions {
        principal: string;
        password?: string;
        keytab?: string;
        service_principal: string;
    }

    /***
     * https://hbase.js.org/api/client/#creating-a-new-client
     */
    interface ClientOptions extends ClientRequestArgs {
        krb5?: kerberoseOptions | any;
        encoding?: string;
    }


    /**
     * https://hbase.js.org/api/client/#client-server-information-and-api-entry-point
     */
    class Client {
        /**
         * https://hbase.js.org/api/client/#creating-a-new-client
         * @param options
         */
        constructor(options: ClientOptions);

        /**
         * https://hbase.js.org/api/client/#api-clientstatus_cluster
         * @param callback
         */
        status_cluster(callback: CallbackType): void;

        /**
         * https://hbase.js.org/api/client/#api-clienttable
         * @param name
         */
        table(name: string): Table;

        /**
         * https://hbase.js.org/api/client/#api-clienttables
         * @param callback
         */
        tables(callback: CallbackType): void;

        /**
         * https://hbase.js.org/api/client/#api-version
         * @param callback
         */
        version(callback: CallbackType): void;

        /**
         * https://hbase.js.org/api/client/#api-version_cluster
         * @param callback
         */
        version_cluster(callback: CallbackType): void;

    }

    class Connection {
        constructor(client: Client);

        delete(command: string, callback: CallbackType): void;

        get(command: string, callback: CallbackType): void;

        handleJson(response: any, body: any): void;

        makeRequest(method: string, command: string, data: any, callback: CallbackType): void;

        post(command: string, data: any, callback: CallbackType): void;

        put(command: string, data: any, callback: CallbackType): void;

    }

    class Row {
        constructor(client: Client, table: Table, key: string);

        delete(callback: CallbackType): any;

        delete([column], callback: CallbackType): any;

        exists(column: string, callback: CallbackType, ...args: any[]): any;

        get(column: string, callback: CallbackType, ...args: any[]): any;

        put(columns: any, values: any, callback: any, ...args: any[]): any;

    }

    class Scanner {
        constructor(client: Client, options: any);

        delete(callback: CallbackType): void;

        get(callback: CallbackType): void;

        init(callback: CallbackType): void;
    }

    class Table {
        constructor(client: Client, name: string);

        create(schema: string, callback: CallbackType, ...args: any[]): void;

        delete(callback: CallbackType): void;

        exists(callback: CallbackType): void;

        regions(callback: CallbackType): void;

        row(key: string): Row;

        scan(options: any, callback: CallbackType, ...args: any[]): Scanner;

        schema(callback: CallbackType): void;

        update(schema: string, callback: CallbackType): void;

    }

    namespace utils {
        function merge(...args: any[]): any;

        namespace base64 {
            function decode(data: Buffer | string, from_encoding: string): string;

            function encode(data: Buffer | string, to_encoding: string): string;

        }

        namespace url {
            function encode(args: {
                table: string;
                key: string;
                columns: [] | { key: any } | string;
                start: string;
                end: string;
                params: { key: any };
            }): string;

        }

    }

}

