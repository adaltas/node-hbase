// Generated by CoffeeScript 1.12.5
var Row, Scanner, Table;

Row = require('./row');

Scanner = require('./scanner');

Table = function(client, name) {
  this.client = client;
  this.name = name;
  return this;
};

Table.prototype.create = function(schema, callback) {
  var args;
  args = Array.prototype.slice.call(arguments);
  schema = args.length && typeof args[0] === 'object' || typeof args[0] === 'string' ? args.shift() : {};
  callback = args.length ? args.shift() : null;
  schema.name = this.name;
  if (typeof schema === 'string') {
    schema = {
      ColumnSchema: [
        {
          name: schema
        }
      ]
    };
  }
  return this.client.connection.put("/" + this.name + "/schema", schema, (function(_this) {
    return function(error, data) {
      if (!callback) {
        if (error) {
          throw error;
        } else {
          return;
        }
      }
      return callback.apply(_this, [error, error ? null : true]);
    };
  })(this));
};

Table.prototype["delete"] = function(callback) {
  return this.client.connection["delete"]("/" + this.name + "/schema", (function(_this) {
    return function(error, data) {
      if (!callback) {
        if (error) {
          throw error;
        } else {
          return;
        }
      }
      return callback.apply(_this, [error, error ? null : true]);
    };
  })(this));
};

Table.prototype.exists = function(callback) {
  return this.client.connection.get("/" + this.name + "/exists", (function(_this) {
    return function(error, exists) {
      if (error && error.code === 404) {
        error = null;
        exists = false;
      }
      return callback.apply(_this, [error, error ? null : exists !== false]);
    };
  })(this));
};

Table.prototype.update = function(schema, callback) {
  schema.name = this.name;
  return this.client.connection.post("/" + this.name + "/schema", schema, (function(_this) {
    return function(error, data) {
      if (!callback) {
        if (error) {
          throw error;
        } else {
          return;
        }
      }
      return callback.apply(_this, [error, error ? null : true]);
    };
  })(this));
};

Table.prototype.schema = function(callback) {
  return this.client.connection.get("/" + this.name + "/schema", (function(_this) {
    return function(error, data) {
      return callback.apply(_this, [error, error ? null : data]);
    };
  })(this));
};

Table.prototype.regions = function(callback) {
  return this.client.connection.get("/" + this.name + "/regions", (function(_this) {
    return function(error, data) {
      return callback.apply(_this, [error, error ? null : data]);
    };
  })(this));
};

Table.prototype.row = function(key) {
  return new Row(this.client, this.name, key);
};

Table.prototype.scan = function(options, callback) {
  var chunks, scanner;
  if (arguments.length === 0) {
    options = {};
  } else if (arguments.length === 1) {
    if (typeof arguments[0] === 'function') {
      callback = options;
      options = {};
    }
  } else if (arguments.length !== 2) {
    throw Error('Invalid arguments');
  }
  options.table = this.name;
  scanner = new Scanner(this.client, options);
  if (callback) {
    chunks = [];
    scanner.on('readable', function() {
      var chunk, results;
      results = [];
      while (chunk = scanner.read()) {
        results.push(chunks.push(chunk));
      }
      return results;
    });
    scanner.on('error', function(err) {
      return callback(err);
    });
    scanner.on('end', function() {
      return callback(null, chunks);
    });
  }
  return scanner;
};

module.exports = Table;
