// Generated by CoffeeScript 1.4.0
var Row, Scanner, Table;

Row = require("./hbase-row");

Scanner = require("./hbase-scanner");

Table = function(client, name) {
  this.client = client;
  return this.name = name;
};

Table.prototype.create = function(schema, callback) {
  var args, self;
  self = this;
  args = Array.prototype.slice.call(arguments_);
  schema = (args.length && typeof args[0] === "object" || typeof args[0] === "string" ? args.shift() : {});
  callback = (args.length ? args.shift() : null);
  schema.name = this.name;
  if (typeof schema === "string") {
    schema = {
      ColumnSchema: [
        {
          name: schema
        }
      ]
    };
  }
  return this.client.connection.put("/" + this.name + "/schema", schema, function(error, data) {
    if (!callback) {
      if (error) {
        throw error;
      } else {
        return;
      }
    }
    return callback.apply(self, [error, (error ? null : true)]);
  });
};

Table.prototype["delete"] = function(callback) {
  var self;
  self = this;
  return this.client.connection["delete"]("/" + this.name + "/schema", function(error, data) {
    if (!callback) {
      if (error) {
        throw error;
      } else {
        return;
      }
    }
    return callback.apply(self, [error, (error ? null : true)]);
  });
};

Table.prototype.exists = function(callback) {
  var self;
  self = this;
  return this.client.connection.get("/" + this.name + "/exists", function(error, exists) {
    if (error && error.code === 404) {
      error = null;
      exists = false;
    }
    return callback.apply(self, [error, (error ? null : exists !== false)]);
  });
};

Table.prototype.update = function(schema, callback) {
  var self;
  self = this;
  schema.name = this.name;
  return this.client.connection.post("/" + this.name + "/schema", schema, function(error, data) {
    if (!callback) {
      if (error) {
        throw error;
      } else {
        return;
      }
    }
    return callback.apply(self, [error, (error ? null : true)]);
  });
};

Table.prototype.getSchema = function(callback) {
  var self;
  self = this;
  return this.client.connection.get("/" + this.name + "/schema", function(error, data) {
    return callback.apply(self, [error, (error ? null : data)]);
  });
};

Table.prototype.getRegions = function(callback) {
  var self;
  self = this;
  return this.client.connection.get("/" + this.name + "/regions", function(error, data) {
    return callback.apply(self, [error, (error ? null : data)]);
  });
};

Table.prototype.getRow = function(key) {
  return new Row(this.client, this.name, key);
};

Table.prototype.getScanner = function(id) {
  return new Scanner(this.client, this.name, id);
};

module.exports = Table;
