// Generated by CoffeeScript 1.7.1
var crypto, utils;

crypto = require('crypto');

utils = {
  base64: {
    encode: function(string) {
      return (new Buffer(string, 'utf8')).toString('base64');
    },
    decode: function(string) {
      return (new Buffer(string, 'base64')).toString('utf8');
    }
  },
  url: {
    encode: function(table, key, columns, from, to, params) {
      var args, columnPath, cs, k, newpath, ps;
      args = Array.prototype.slice.call(arguments);
      newpath = '/';
      if (args.length > 3 && typeof args[args.length - 1] === 'object') {
        params = args.pop();
      }
      if (args.length) {
        newpath += encodeURIComponent(args.shift());
      }
      if (args.length) {
        newpath += '/';
        newpath += encodeURIComponent(args.shift());
      }
      if (args.length) {
        columnPath = void 0;
        columns = args.shift();
        if (Array.isArray(columns)) {
          columnPath = columns.map(function(column) {
            if (Array.isArray(column)) {
              return column.map(function(c) {
                return encodeURIComponent(c);
              }).join(':');
            } else {
              return encodeURIComponent(column);
            }
          }).join(',');
        } else if (typeof columns === 'object') {
          cs = [];
          for (k in columns) {
            cs.push("" + (encodeURIComponent(k)) + ":" + (encodeURIComponent(columns[k])));
          }
          columnPath = cs.join(',');
        } else {
          columnPath = columns ? encodeURIComponent(columns) : '';
        }
        newpath += "/";
        if (columnPath) {
          newpath += "" + columnPath;
        }
      }
      from = to = null;
      if (args.length) {
        from = args.shift();
      }
      if (args.length) {
        to = args.shift();
      }
      if (from || to) {
        newpath += '/';
        if (from) {
          newpath += encodeURIComponent(from);
        }
        if (to) {
          newpath += ',';
          newpath += encodeURIComponent(to);
        }
      }
      if (params) {
        newpath += '?';
        ps = [];
        for (k in params) {
          ps.push("" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(params[k])));
        }
        newpath += ps.join(',');
      }
      return newpath;
    }
  }
};

module.exports = utils;
