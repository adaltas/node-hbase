// Generated by CoffeeScript 1.4.0
var Scanner, Table, utils;

utils = require("./hbase-utils");

Table = require("./hbase-table");

Scanner = function(client, table, id) {
  this.client = client;
  this.table = (typeof table === "string" ? table : table.name);
  this.id = id || null;
  return this.callback = null;
};

Scanner.prototype["continue"] = function() {
  return this.get();
};

Scanner.prototype.create = function(params, callback) {
  var args, encode, key, self;
  self = this;
  args = Array.prototype.slice.call(arguments_);
  key = "/" + this.table + "/scanner";
  params = (typeof args[0] === "object" ? args.shift() : {});
  callback = args.shift();
  if (params.startRow) {
    params.startRow = utils.base64.encode(params.startRow);
  }
  if (params.endRow) {
    params.endRow = utils.base64.encode(params.endRow);
  }
  if (params.column) {
    if (typeof params.column === "string") {
      params.column = utils.base64.encode(params.column);
    } else {
      params.column.forEach(function(column, i) {
        return params.column[i] = utils.base64.encode(column);
      });
    }
  }
  if (params.filter) {
    encode = function(obj) {
      var k, _results;
      _results = [];
      for (k in obj) {
        if (k === "value" && (!obj["type"] || obj["type"] !== "RegexStringComparator" && obj["type"] !== "PageFilter")) {
          _results.push(obj[k] = utils.base64.encode(obj[k]));
        } else {
          if (typeof obj[k] === "object") {
            _results.push(encode(obj[k]));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };
    encode(params.filter);
    params.filter = JSON.stringify(params.filter);
  }
  console.log(params);
  return this.client.connection.put(key, params, function(error, data, response) {
    var id;
    if (error) {
      return callback.apply(self, [error, null]);
    }
    id = /scanner\/(\w+)$/.exec(response.headers.location)[1];
    self.id = id;
    return callback.apply(self, [null, id]);
  });
};

Scanner.prototype["delete"] = function(callback) {
  var key, self;
  self = this;
  key = "/" + this.table + "/scanner/" + this.id;
  return this.client.connection["delete"](key, function(error, success) {
    if (!callback) {
      if (error) {
        throw error;
      } else {
        return;
      }
    }
    return callback.apply(self, [error, (error ? null : true)]);
  });
};

Scanner.prototype.get = function(callback) {
  var key, self;
  self = this;
  key = "/" + this.table + "/scanner/" + this.id;
  if (callback) {
    this.callback = callback;
  } else {
    callback = this.callback;
  }
  return this.client.connection.get(key, function(error, data, response) {
    var cells;
    if (response && response.statusCode === 204) {
      return callback.apply(self, [null, null]);
    }
    if (error) {
      return callback.apply(self, [error, null]);
    }
    cells = [];
    data.Row.forEach(function(row) {
      key = utils.base64.decode(row.key);
      return row.Cell.forEach(function(cell) {
        data = {};
        data.key = key;
        data.column = utils.base64.decode(cell.column);
        data.timestamp = cell.timestamp;
        data.$ = utils.base64.decode(cell.$);
        return cells.push(data);
      });
    });
    return callback.apply(self, [null, cells]);
  });
};

module.exports = Scanner;
